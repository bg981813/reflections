How did viewing a diff between two versions of a file help you see the bug that was introduced?
	It allowed me to only see the code that was changed rather than looking at the hundreds of unchanged lines of code

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
	It will allow you to look at the proir code that may have been working and see what you did that caused an error within the new document. Also, it allows you to go back to a version that does not have the feature that you don't want anymore without having to delete it.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?
	Pro:
		Able to determine the size and only save what you feel is enough to commit.
	Con:
		User error which the person could wait too long to commit and have to big of a commit

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
	This is because Git was intended to be used with code primarily, which must be associtated with multiple files. While google docs was intended for documents which are not dependant on other docs.

How can you use the commands git log and git diff to view the history of files?
	By using the command git log you see all of the versions of the repository and the time and messages of each commit. This allows you to then use the get diff with the id of two of the versions and see only the differences between.

How might using version control make you more confident to make changes that could break something?
	Because with version control, you are always able to revert the product back to a state where the application runs.

Now that you have your workspace set up, what do you want to try using Git for?
	I want to start using Git in order to try to integrate version control into any future products in which I choose to work on.